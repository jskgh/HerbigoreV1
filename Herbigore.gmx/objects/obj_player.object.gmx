<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Variables

/* Physics */
dir = 1; 
vx = 0;
vy = 0;
vxMax = 3;
vyMax = 10;
acc = 1;
fric = 0.8;
grav = 1;
jumpHeight = 9.9;

/* Flags */
canJump = false;

/* Inventory */
inventory = ds_list_create();
selectedItem = -1;
currentAbility = -1;
displayInventory = true;
i = 0;
size = 0;
displayedItem = "";
menuIndex = 0;


//Inventory display
inventoryX = 128;
inventoryY = 128;
inventoryOriginY = 128;
inventoryMargin = 32;

submenuX = 256;
submenuY = 128;

breedArray[0] = -1;
breedArray[1] = -1;



// Extra inventory stuff
selectedCast = -1;
selectedElement = -1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Logic

audio_listener_position(x,y,0);
audio_listener_orientation(x,y,0,x,y,1); 

/* Controls */
k_left = keyboard_check(ord('A'));
k_right = keyboard_check(ord('D'));
k_jump = keyboard_check_pressed(ord('W'));
k_action = keyboard_check_pressed(ord('F'));
m_right = mouse_check_button_pressed(mb_right);
m_left = mouse_check_button_pressed(mb_left);

/* Step variables */
vy += grav;

/* Direction */
if (k_left &amp;&amp; !k_right){
    dir = -1;
    vx -= acc;
} else if (k_right &amp;&amp; !k_left) {
    dir = 1;
    vx += acc;
}

/* Vertical */
if (place_meeting(x+vx,y,obj_collidable)){
    ovx = vx;
    vx = 0;
    while(!place_meeting(x+vx+sign(ovx),y,obj_collidable) &amp;&amp; (abs(vx) &lt; abs(ovx-1))){
        vx += sign(ovx);
    }   
}


if (place_meeting(x,y+vy,obj_collidable)){
    ovy = vy;
    vy = 0;
    while(!place_meeting(x,y+vy+sign(ovy),obj_collidable) &amp;&amp; (abs(vy) &lt; abs(ovy-1))){
        vy += sign(ovy);
    }   
}


/* Jump */
if (k_jump &amp;&amp; (vy == 0)){
    vy = -jumpHeight;
}



/* Movement */
vx *= fric;
x += vx;
y += vy;


/* Restrict velocities */
vx = clamp(vx,-vxMax,vxMax);
vy = clamp(vy,-vyMax,vyMax);


/* Player Attack */
if(k_action){
    if(currentAbility != -1){
        playerUseAbility(currentAbility);
        ds_list_delete(inventory,ds_list_find_index(inventory,currentAbility));
        selectedItem = -1;
        currentAbility = -1;
    }
    
}

if(m_right){
    currentAbility = -1;
    selectedItem = -1;
    
    
    /* Pickup plants */
    pickupPlant = instance_place(x,y,obj_plant)
    if(pickupPlant){
        ds_list_add(inventory,pickupPlant.genome);
        show_debug_message(pickupPlant.genome);
        with(pickupPlant){instance_destroy()};
    }


    
    
}



/* Player room boundaries */
x = clamp(x,0,room_width);
y = clamp(y,0,room_height);


image_xscale = dir;



/* Inventory */
size = ds_list_size(inventory)-1;

if(mouse_wheel_down()){
    if(menuIndex &lt; size){
        menuIndex++;
    } else {
        menuIndex = 0;
    }
}

if(mouse_wheel_up()){
    if(menuIndex &gt; 0){
        menuIndex--;
    } else {
        menuIndex = size;
    }
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(displayInventory){
    var i;
    inventoryY = inventoryOriginY; // keep list static

    for(i = 0; i &lt; ds_list_size(inventory); i++){
        // TODO: don't run plantGetName every step. Store names as variables
        item = plantGetName(ds_list_find_value(inventory,i));
        if(drawnButtonPressed(inventoryX,inventoryY,200,30,item)){
            selectedItem = ds_list_find_value(inventory,i);
        }

        inventoryY += inventoryMargin;
    }
}

if(room == rm_incubator){
    if(selectedItem != -1){
        subMenuX = 128;
        ind = ds_list_find_index(inventory,selectedItem);
        n = inventoryOriginY + (ind * inventoryMargin);
        if(drawnButtonPressed(subMenuX,n,200,30,"Add as Ingredient")){
            if(obj_incubator.plant1 == -1){
                obj_incubator.plant1 = selectedItem;
            } else if (obj_incubator.plant2 == -1) {
                obj_incubator.plant2 = selectedItem;
            }
            selectedItem = -1;
        }
    }
} else if (room == rm_storage){

    if(selectedItem != -1){
    
    }

} else {
    if(selectedItem != -1){
        subMenuX = 128;
        ind = ds_list_find_index(inventory,selectedItem);
        n = inventoryOriginY + (ind * inventoryMargin);


        subMenuX += inventoryMargin*8;
        
        if(drawnButtonPressed(subMenuX,n,200,30,"Equip")){
            currentAbility = selectedItem;
        }
        subMenuX += inventoryMargin*8;
        
        if(drawnButtonPressed(subMenuX,n,200,30,"Breed")){
            if(breedArray[0] == -1){
                breedArray[0] = selectedItem;
            } else {
                breedArray[1] = selectedItem;
            }
            
            if((breedArray[0] != -1) &amp;&amp; (breedArray[1] != -1)){
                child = breed(breedArray[0],breedArray[1]);
                ds_list_add(inventory,child);
                ds_list_delete(inventory,ds_list_find_index(inventory,breedArray[0]));
                ds_list_delete(inventory,ds_list_find_index(inventory,breedArray[1]));
                breedArray[0] = -1;
                breedArray[1] = -1;
                selectedItem = -1;
            }
        }
        subMenuX += inventoryMargin*8;
        if(drawnButtonPressed(subMenuX,n,200,30,"Discard")){
            ds_list_delete(inventory,ds_list_find_index(inventory,selectedItem));
            selectedItem = -1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
